import { ITerminalAddon, Terminal, IDisposable } from 'xterm';

/**
 * trzsz: https://github.com/trzsz/trzsz.js
 * Copyright(c) 2023 Lonny Wong <lonnywong@qq.com>
 * @license MIT
 */
/**
 * The trzsz options
 */
interface TrzszOptions {
    /**
     * Write the server output to the terminal.
     * @param {string | ArrayBuffer | Uint8Array | Blob} output - The server output.
     */
    writeToTerminal?: (output: string | ArrayBuffer | Uint8Array | Blob) => void;
    /**
     * Send the terminal input (aka: user input) to the server.
     * @param {string | Uint8Array} input - The terminal input (aka: user input).
     */
    sendToServer?: (input: string | Uint8Array) => void;
    /**
     * Choose some files to be sent to the server.
     * No need for webshell or which running in a browser.
     * @param {boolean} directory - choose directories and files, or just files.
     * @return {Promise<string[] | undefined>} The file paths array to be sent.
     *                                         undefined means the user has cancelled.
     */
    chooseSendFiles?: (directory?: boolean) => Promise<string[] | undefined>;
    /**
     * Choose a directory to save the received files.
     * No need for webshell or which running in a browser.
     * @return {Promise<string | undefined>} The directory to save the received files.
     *                                       undefined means the user has cancelled.
     */
    chooseSaveDirectory?: () => Promise<string | undefined>;
    /**
     * @deprecated A user event may be required to open the save dialog in browsers.
     * No need for nodejs environment ( e.g.: electron preload.js )
     * @param {string} fileName - The file name going to download.
     * @return {Promise<boolean>} open the save dialog or cancel the download.
     */
    requireUserPermission?: (fileName: string) => Promise<boolean>;
    /**
     * The columns of terminal.
     */
    terminalColumns?: number;
    /**
     * Is there a windows shell? Such as `cmd` and `PowerShell`.
     */
    isWindowsShell?: boolean;
}

/**
 * trzsz: https://github.com/trzsz/trzsz.js
 * Copyright(c) 2023 Lonny Wong <lonnywong@qq.com>
 * @license MIT
 */

/**
 * Trzsz filter the input and output to upload and download files.
 */
declare class TrzszFilter {
    private writeToTerminal;
    private sendToServer;
    private chooseSendFiles?;
    private chooseSaveDirectory?;
    private terminalColumns;
    private isWindowsShell;
    private trzszTransfer;
    private textProgressBar;
    private uniqueIdMaps;
    private uploadFilesList;
    private uploadFilesResolve;
    private uploadFilesReject;
    private uploadInterrupting;
    private uploadSkipTrzCommand;
    /**
     * Create a trzsz filter to upload and download files.
     * @param {TrzszOptions} options - The trzsz options.
     */
    constructor(options: TrzszOptions);
    /**
     * Process the server output.
     * @param {string} output - The server output.
     */
    processServerOutput(output: string | ArrayBuffer | Uint8Array | Blob): void;
    /**
     * Process the terminal input (aka: user input).
     * @param {string} input - The terminal input (aka: user input).
     */
    processTerminalInput(input: string): void;
    /**
     * Process the terminal binary input (aka: mouse events).
     * @param {string} input - The terminal binary input (aka: mouse events).
     */
    processBinaryInput(input: string): void;
    /**
     * Reset the terminal columns on resizing.
     * @param {number} columns - The columns of terminal.
     */
    setTerminalColumns(columns: number): void;
    /**
     * @return {boolean} Is transferring files or not.
     */
    isTransferringFiles(): boolean;
    /**
     * Stop transferring files.
     */
    stopTransferringFiles(): void;
    /**
     * Upload files or directories to the server.
     * @param {string[] | DataTransferItemList} items - The files or directories to upload.
     */
    uploadFiles(items: string[] | DataTransferItemList): Promise<unknown>;
    private uniqueIdExists;
    private detectAndHandleTrzsz;
    private handleTrzszDownloadFiles;
    private handleTrzszUploadFiles;
}

/**
 * trzsz: https://github.com/trzsz/trzsz.js
 * Copyright(c) 2023 Lonny Wong <lonnywong@qq.com>
 * @license MIT
 */

/**
 * An addon for xterm.js that supports trzsz
 */
declare class TrzszAddon implements ITerminalAddon {
    private socket;
    private disposables;
    private options;
    private trzsz;
    /**
     * Create a TrzszAddon
     * @param {WebSocket} socket - The websocket connection.
     * @param {TrzszOptions} options - The trzsz options.
     */
    constructor(socket: WebSocket, options?: TrzszOptions);
    /**
     * Activate TrzszAddon
     * @param {Terminal} terminal - The xterm.js terminal
     */
    activate(terminal: Terminal): void;
    /**
     * Dispose TrzszAddon
     */
    dispose(): void;
    /**
     * Upload files or directories to the server.
     * @param {string[] | DataTransferItemList} items - The files or directories to upload.
     */
    uploadFiles(items: string[] | DataTransferItemList): Promise<unknown>;
    /**
     * Add websocket event handler
     * @param {WebSocket} socket - The websocket connection.
     * @param {K} type - The websocket event type.
     * @param {Function} handler - The websocket event handler.
     * @return {IDisposable} The disposable object.
     */
    protected addSocketListener<K extends keyof WebSocketEventMap>(socket: WebSocket, type: K, handler: (this: WebSocket, ev: WebSocketEventMap[K]) => any): IDisposable;
}

export { TrzszAddon, TrzszFilter, TrzszOptions };
