/**
 * trzsz: https://github.com/trzsz/trzsz.js
 * Copyright(c) 2022 Lonny Wong <lonnywong@qq.com>
 * @license MIT
 */
/// <reference types="node" />
/**
 * trzsz version injected by rollup-plugin-version-injector
 */
export declare const trzszVersion = "[VersionInject]{version}[/VersionInject]";
export declare const isRunningInWindows: boolean;
export declare const isRunningInBrowser: boolean;
export declare function strToUint8(str: string): Uint8Array;
export declare function uint8ToStr(buf: Uint8Array, encoding?: BufferEncoding): Promise<string>;
export declare function strToArrBuf(str: string): ArrayBuffer;
export declare function encodeBuffer(buf: string | Uint8Array): string;
export declare function decodeBuffer(buf: string): Uint8Array;
export declare class TrzszError extends Error {
    private readonly type;
    private readonly trace;
    constructor(message: string, type?: string | null, trace?: boolean);
    isTraceBack(): boolean;
    isRemoteExit(): boolean;
    isRemoteFail(): boolean;
    static getErrorMessage(err: Error): string;
}
export interface TrzszFile {
    closeFile: () => void;
}
export interface TrzszFileReader extends TrzszFile {
    getPathId: () => number;
    getRelPath: () => string[];
    isDir: () => boolean;
    getSize: () => number;
    readFile: (buf: ArrayBuffer) => Promise<Uint8Array>;
}
export interface TrzszFileWriter extends TrzszFile {
    getFileName: () => string;
    getLocalName: () => string;
    isDir: () => boolean;
    writeFile: (buf: Uint8Array) => Promise<void>;
}
export type OpenSaveFile = (saveParam: any, fileName: string, directory: boolean, overwrite: boolean) => Promise<TrzszFileWriter>;
export interface ProgressCallback {
    onNum: (num: number) => void;
    onName: (name: string) => void;
    onSize: (size: number) => void;
    onStep: (step: number) => void;
    onDone: () => void;
}
export declare function checkDuplicateNames(files: TrzszFileReader[]): void;
export declare function isArrayOfType(arr: any, type: string): boolean;
export declare function isVT100End(c: number): boolean;
export declare function stripServerOutput(output: string | ArrayBuffer | Uint8Array | Blob): any;
export declare const TmuxMode: {
    NoTmux: number;
    TmuxNormalMode: number;
    TmuxControlMode: number;
};
export declare function checkTmux(): Promise<(number | ((data: string | Uint8Array) => any))[]>;
export declare function getTerminalColumns(): number;
export declare function setStdinRaw(): Promise<void>;
export declare function resetStdinTty(): Promise<void>;
export declare function setupConsoleOutput(): void;
//# sourceMappingURL=comm.d.ts.map