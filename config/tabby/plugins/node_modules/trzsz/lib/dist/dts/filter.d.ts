/**
 * trzsz: https://github.com/trzsz/trzsz.js
 * Copyright(c) 2023 Lonny Wong <lonnywong@qq.com>
 * @license MIT
 */
import { TrzszOptions } from "./options";
/**
 * Find the trzsz magic key from output buffer.
 * @param {string | ArrayBuffer | Uint8Array | Blob} output - The output buffer.
 */
export declare function findTrzszMagicKey(output: string | ArrayBuffer | Uint8Array | Blob): Promise<string>;
/**
 * Trzsz filter the input and output to upload and download files.
 */
export declare class TrzszFilter {
    private writeToTerminal;
    private sendToServer;
    private chooseSendFiles?;
    private chooseSaveDirectory?;
    private terminalColumns;
    private isWindowsShell;
    private trzszTransfer;
    private textProgressBar;
    private uniqueIdMaps;
    private uploadFilesList;
    private uploadFilesResolve;
    private uploadFilesReject;
    private uploadInterrupting;
    private uploadSkipTrzCommand;
    /**
     * Create a trzsz filter to upload and download files.
     * @param {TrzszOptions} options - The trzsz options.
     */
    constructor(options: TrzszOptions);
    /**
     * Process the server output.
     * @param {string} output - The server output.
     */
    processServerOutput(output: string | ArrayBuffer | Uint8Array | Blob): void;
    /**
     * Process the terminal input (aka: user input).
     * @param {string} input - The terminal input (aka: user input).
     */
    processTerminalInput(input: string): void;
    /**
     * Process the terminal binary input (aka: mouse events).
     * @param {string} input - The terminal binary input (aka: mouse events).
     */
    processBinaryInput(input: string): void;
    /**
     * Reset the terminal columns on resizing.
     * @param {number} columns - The columns of terminal.
     */
    setTerminalColumns(columns: number): void;
    /**
     * @return {boolean} Is transferring files or not.
     */
    isTransferringFiles(): boolean;
    /**
     * Stop transferring files.
     */
    stopTransferringFiles(): void;
    /**
     * Upload files or directories to the server.
     * @param {string[] | DataTransferItemList} items - The files or directories to upload.
     */
    uploadFiles(items: string[] | DataTransferItemList): Promise<unknown>;
    private uniqueIdExists;
    private detectAndHandleTrzsz;
    private handleTrzszDownloadFiles;
    private handleTrzszUploadFiles;
}
//# sourceMappingURL=filter.d.ts.map